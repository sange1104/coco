import sys


def dijkstra(K, V, graph):
    INF = sys.maxsize
    visited= [False] * V
    distance= [INF] * V
    distance[K - 1] = 0

    while True:
        min_dtc = INF
        N = -1

        # 방문하지 않은 노드 중 d값이 가장 작은 값을 선택해 그 노드의 번호를 N에 저장한다.
        # 즉, 방문하지 않은 노드 중 K 정점과 가장 가까운 노드를 선택한다.
        for j in range(V):
            if not visited[j] and min_dtc > distance[j]:
                min_dtc = distance[j]
                min_index = j
        # 방문하지 않은 노드 중 현재 K 정점과 가장 가까운 노드와의 거리가 INF 라는 뜻은
        # 방문하지 않은 남아있는 모든 노드가 A에서 도달할 수 없는 노드라는 의미이므로 반복문을 빠져나간다.
        if min_dtc == INF:
            break

        # N번 노드를 '방문'한다.
        # '방문'한다는 의미는 모든 노드를 탐색하며 min_index번 노드를 통해서 가면 더 빨리 갈 수 있는 노드가 있는지 확인하고,
        # 더 빨리 갈 수 있다면 해당 노드(노드의 번호 j라고 하자)의 distance[j]를 업데이트 해준다.
        '''



        blank




        '''

    return distance

def main():

    INF = sys.maxsize
    graph = [[INF]*6 for _ in range(6)]

    graph[0][1]=2
    graph[1][0]=2
    graph[0][2]=5
    graph[2][0]=5
    graph[0][3]=1
    graph[3][0]=1
    graph[1][2]=3
    graph[2][1]=3
    graph[1][3]=2
    graph[3][1]=2
    graph[2][3]=3
    graph[3][2]=3
    graph[2][4]=1
    graph[4][2]=1
    graph[2][5]=5
    graph[5][2]=5
    graph[3][4]=1
    graph[4][3]=1
    graph[4][5]=2
    graph[5][4]=2
    

    for d in dijkstra(1, 6, graph):
        print(d if d != INF else "INF")

main()
